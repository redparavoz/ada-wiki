
== NAME ==

dynamo - Ada Web Application Generator

== SYNOPSIS ==

*dynamo* [ -o
_directory _ ] [ -t
_templates _ ] [ -c
_config-dir _ ]
_command _ 

== DESCRIPTION ==

_dynamo_ is a command to help developers write an Ada Web Application using the
*ASF* framework.  _dynamo_ provides several commands to perform one specific task in
the development process.

First the
*create-project* command will be used to initiate a new project.  The project name is used at this stage
to configure the name of the root Ada package for the application.

The
*add-model* command will be used to create a database table mapping file.  The database mapping file
describes how to map a database table into an Ada record type for the
*ADO* framework.  The
*generate* command is then used to build the Ada model files from the database mapping files or from a UML model.
At the same time, it generates the SQL database creation schemas for MySQL and SQLite databases.

The
*add-page* command is then used to add web pages for the application.  When a new application
layout is necessary, the
*add-layout* command can be used.

To deploy an application on a production server, the
*dist* command can be used to prepare the distribution tree, merge various files and directories,
perform CSS and Javascript compression by using the
*yui-compressor* or other tools.

_dynamo _ uses the
*dynamo.xml* file to get information on the project and customize the generation.  It scans the
GNAT project files to obtain the dependencies between several
_dynamo _ components.

== OPTIONS ==

The following options are recognized by _dynamo_:

-o directory

Specifies the directory where result files are created.  The default is the current directory.

-c directory

Specifies the configuration directory which contains _dynamo_ configuration
files as well as template files.

-t directory

Specifies the templates directory.  This option can be used to override the
templates provided by _dynamo_.

== COMMANDS ==


=== The create-project command ===
{{{
dynamo create-project [-l {apache|gpl|proprietary}] [--web] [--tool] [--ado] name author email
}}}

Create a new project in the current working directory or in the
directory specified by the
_-o _ option.  The project name should be a valid Ada identifier.  It represents the Ada root
package name for the project.  The command creates a set of Ada files, a configure script,
a Makefile as well as a
_gnatmake _ build file.  The application can be immediately compiled to obtain a web server that is ready
to run.  The
*-l* option allows to choose the license headers.  The tool supports the generation
of Apache, the GNU license or a proprietary license.  The author's name and email address
can be specified in the command line so that the license headers integrates them correctly.

The project type is controlled by one of the
*--web* ,
*--tool* or
*--ado* option.  When
*--ado* is specified, a command line project using Ada Database Objects is generated.  This type of
project does not use Ada Server Faces nor Ada Web Application.  When
*--web* option is specified, a full web application based on ASF and AWA is created.  The
*--web* is the default if no other option is specified.

=== The dist command ===
{{{
dynamo dist target-dir [package.xml]
}}}

After the project is compiled, this command allows to build the distribution files that
must be installed on the server.  The
_dist _ command reads a
_package.xml _ file which describes how to make such distribution by specifying the files that must
be copied.  For some files, it is possible to execute an external application that will
do some transformation on the source file and prepare it for the installation.
For example the
_package.xml _ description can compress the Javascript and CSS files by using the
*yui-compressor* tool.  Images can be optimized by using
*pngcrush* or
*jpegtran.* 
=== The create-database command ===
{{{
dynamo create-database model [connection] admin-user [admin-password]
}}}

The create-database command creates the database used by the application.
The database schema file is stored in the directory identified by
_model _ and is generated by the
_generate _ command.
The database connection string is optional.  The default database connection string
is read from the
_database _ property in the
*dynamo.xml* configuration file.  The connection string has the following form: 
{{{
driver://host:port/database
}}}

The command will connect to the database server specified by the connection string.
It will use the admin user for this connection. The database is created if it does
not yet exist. If a user is specified in the connection string, a grant command is
issued to create that user and allow him to access the new database.

Example of connection string for MySQL database:
{{{
mysql://localhost:3306/my_db?user=joe&password=admin
}}}

The MySQL server is running on localhost and TCP/IP port 3306.  The database name is
_my_db _ and the user
_joe _ is created for the application with the password
_admin. _ 
The database tables are created by using the
_create-name-driver.sql _ script where
_name _ represents the Dynamo project name.

=== The create-plugin command ===
{{{
dynamo create-plugin name [ada | web]
}}}

Create a new plugin for the current project.  The plugin sources are created in the
*plugins/\fIname\fR* directory.  The optional last argument controls whether the new plugin contains
Ada sources or is a Web plugin.  The plugin can be seen as a separate small
_Dynamo _ project that is used by a project.  Once create, the other
_Dynamo _ commands can be executed in the new plugin.

=== The add-layout command ===
{{{
dynamo add-layout name
}}}

Create a new XHTML layout file.  The layout file is an XHTML facelet template which can
be used by a web page to provide a common presentation layout.  When the project is
created, at least one layout is proposed.  By adding a new layout, the application
can provide different presentation styles.  The layout files are stored in the
*web/WEB-INF/layouts* directory.

=== The add-page command ===
{{{
dynamo add-page name
}}}

Create a new presentation page.  The presentation page is an XHTML facelet file
which contains HTML code as well as ASF facelet components.  The presentation
pages are stored in the
*web* directory.

=== The add-model command ===
{{{
dynamo add-model [module] name
}}}

Create a new database table model mapping.  The model mapping is an XML file that
describes how to map a database table into an Ada type.
The model mappings are stored in the
*db* directory.  The database table is mapped to an Ada tagged record in the package
*_project-name_*._module_.Model\fR if a module name is passed otherwise the package
will have the name *_project-name_.Model*.  The Ada record will have the name
*_name__Ref*.

=== The add-module command ===
{{{
dynamo add-module name
}}}

Add a new module to the project.  The module is composed of a set of Ada files
and a set of XHTML presentation files.  The
_name _ parameter is the name of the Ada child package that represents the module.
This is also the name of the directory that will contain the specific XHTML files
used for the module.
The following Ada packages are generated:
{{{
package project.module;

package project.module.Beans;

package project.module.Module;
}}}

where
_project _ is the project name (defined by the
*create-project* command) and
_module _ is the new module name.

The
_Module _ package defines the main module data type with the initialization steps.
The
_Beans _ package defines the Ada bean types which are specific to the module.
Each Ada bean type must be registered in the
_Module _ package.  The generated files are intended to be modified to implement the
module functionality.

=== The build-doc command ===
{{{
dynamo build-doc directory
}}}

Extract the documentation from the project source files and generate the
project documentation.  The Ada specification files are scanned and the
package specification header comment is used as the main structure for
the project documentation.  The XML files are also scanned and the documentation
is extracted from these files.  It can be merged together with other
documentation to build up the final project user documentation.

=== The info command ===
{{{
dynamo info
}}}

Report information about the current project.  This command scans the GNAT projects to
find the
_dynamo _ components dependencies.  It then lists the GNAT projects and the
_dynamo _ components that are used by the current project.

=== The help command ===
{{{
dynamo help name
}}}

Give an help description about a command.

=== The generate command ===
{{{
dynamo generate [model ... ]
}}}

Generate the Ada model implementation from the XML model mappings or from a UML model.
The Ada model files are generated in the
*src/model* directory.  Developers should not modify these files by themselves.
When no file is specified, the
*generate* command will read all the XML and XMI files stored in the
*db* directory.  It will generate all the models found in those files.

At the same time, the command generates the SQL files to create the
database tables for the supported drivers (MySQL and SQLite).
For each project, it generates a set of SQL files that can be used
to create or delete the database tables.

The
*generate* command is able to read XMI 1.2 model files (UML 1.4) as well as ArgoUML files (.zargo).
The UML model must use the
_Dynamo _ UML profile and assign the
_Table _ ,
_PK _ and
_Bean _ stereotypes to the model element for the generation to be activated.

=== The propset command ===
{{{
dynamo propset name value
}}}

Set a project property to configure some commands provided by
*dynamo*.  The property is composed of a name and a value.  It is saved in
the
*dynamo.xml* file.  The following properties are recognized:

== PROPERTIES ==

The
*dynamo.xml* file defines several configuration properties which are used to customize several
commands.  These properties can be modified with the
*propset* command.

=== author ===
This property defines the author name inserted in file headers.

=== author_email ===
The author email address inserted in file headers.

=== gnat.project ===
The GNAT project file name which is used to build the project.  By default, the GNAT
project file name is the same as the dynamo project name.  This property allows to
specify a different name when the dynamo project name contains characters not allowed
in GNAT project names.

=== license ===
This property controls the license header in file headers.
The following license names are recognized:
*gpl* *apache* 
=== search_dirs ===
This property is generated automatically by
*dynamo* from the GNAT project paths.  It indicates the search paths
that the Ada Web Application should use to search configuration files,
resource bundles and XHTML presentation files.

=== database ===
The default database connection string.

== FILES ==


=== /usr/share/dynamo/base/generator.properties ===
This configuration file is read by
_dynamo _ to configure various installation parameters necessary for the generation.

=== /usr/share/dynamo/base/mappings/AdaMappings.xml ===

=== /usr/share/dynamo/base/mappings/MySQLMappings.xml ===

=== /usr/share/dynamo/base/mappings/SQLiteMappings.xml ===
These XML files define the type mapping used in the
_dynamo _ model files.  These mapping indicate for each basic type used in the
XML model files, what is the target Ada, MySQL or SQLite type name.

=== /usr/share/dynamo/base/commands ===
This directory contains XML files that describe additional template commands.

=== /usr/share/dynamo/base/templates ===
This directory contains the template files associated with
_dynamo _ commands.

=== /usr/share/dynamo/base/uml ===
This directory contains the UML profiles that
_dynamo _ reads to obtain global definitions.

== SEE ALSO ==

_gnatmake(1)_, _gcc(1)_, _yui-compressor(1)_, _pngcrush(1)_, _jpegtran(1)_

== AUTHOR ==

Written by Stephane Carrez.
